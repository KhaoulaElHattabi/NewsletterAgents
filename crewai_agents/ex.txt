from email.header import Header
import html
import os
from crewai import LLM, Agent, Task, Crew, Process
from langchain.tools import Tool
from langchain_openai import AzureChatOpenAI
from langchain_community.tools.tavily_search import TavilySearchResults
from langchain_community.utilities.tavily_search import TavilySearchAPIWrapper
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


# Set up Azure OpenAI
llm_model = LLM(
    model="azure/gpt-35-turbo",
    api_key=os.getenv("OPENAI_API_KEY"),

    base_url = os.getenv("API_BASE")
)

# Define tools
def tavily_search(query: str) -> list:
    tavily_api_key = os.getenv("TAVILY_API_KEY")
    tavily_wrapper = TavilySearchAPIWrapper(tavily_api_key=tavily_api_key)

    search = TavilySearchResults(
        max_results=3,
        include_domains=["wikipedia.org"],
        api_wrapper=tavily_wrapper
    )
 
    results = search.invoke(query)
    return [{"title": r.get("title", ""), "content": r.get("content", ""), "url": r.get("url", "")} for r in results]


tavily_tool = Tool.from_function(
    func=tavily_search,
    name="Tavily Search",
    description="Search for latest AI news using Tavily"
)

def generate_content(prompt: str) -> str:
    response = llm_model(prompt)
    return response.content

content_tool = Tool.from_function(
    func=generate_content,
    name="Content Generator",
    description="Generate content based on a given prompt"
)

def generate_newsletter(articles: list) -> str:
    newsletter = "<h1>ðŸ“° GenAI Info est lÃ  - Votre GenAI newsletter hebdomadaire ðŸ“°</h1><br><br>"
    
    intro = generate_content("Ã‰crivez une introduction engageante pour une newsletter hebdomadaire sur l'IA en franÃ§ais.")
    newsletter += f"<p>{intro}</p><br><br>"
    
    for article in articles:
        title = generate_content(f"GÃ©nÃ©rez un titre accrocheur pour cet article : {article}")
        summary = generate_content(f"GÃ©nÃ©rez un rÃ©sumÃ© de cet article : {article}")
        
        newsletter += f"<h2>{title} ðŸŽ‰</h2><br>"
        newsletter += f"<p>{summary} ðŸ˜Ž</p><br>"
        newsletter += "<hr><br>"
    
    conclusion = generate_content("GÃ©nÃ©rez une conclusion dynamique pour une newsletter sur les avancÃ©es en intelligence artificielle.")
    newsletter += f"<p>{conclusion}</p>"
    
    return newsletter

newsletter_tool = Tool.from_function(
    func=generate_newsletter,
    name="Newsletter Generator",
    description="Generate a complete newsletter from a list of articles"
)

def send_email(subject, body, to_email, from_email, password):
    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = Header(subject, 'utf-8')
    
    # Escape special characters and encode as HTML
    body_html = html.escape(body).encode('ascii', 'xmlcharrefreplace').decode('ascii')
    
    # Attach the body with UTF-8 encoding
    msg.attach(MIMEText(body_html, 'html', 'utf-8'))
 
    server = None
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(from_email, password)
        server.sendmail(from_email, to_email, msg.as_string())
        return "Email envoyÃ© avec succÃ¨s!"
    except Exception as e:
        return f"Erreur lors de l'envoi de l'email: {str(e)}"
    finally:
        if server is not None:
            server.quit()

def sendmail_tool(body: str) -> str:
    from_email = os.getenv("FROM_EMAIL")
    password = os.getenv("EMAIL_PASSWORD")
    to_email = os.getenv("TO_EMAIL")
    return send_email("GenAI Newsletter", body, to_email, from_email, password)

email_tool = Tool.from_function(
    func=sendmail_tool,
    name="Email Sender",
    description="Send the generated newsletter via email"
)

# Define agents
researcher = Agent(
    role='AI News Researcher',
    goal='Find the latest AI developments',
    backstory="You're an AI researcher always on top of the latest developments in artificial intelligence.",
    tools=[tavily_tool],
    verbose=True,
    llm = llm_model
)

writer = Agent(
    role='Newsletter Writer',
    goal='Create an engaging AI newsletter',
    backstory="You're a skilled writer who can create compelling newsletters about AI advancements in French.",
    tools=[newsletter_tool, content_tool],
    verbose=True,
    llm = llm_model

)

sender = Agent(
    role='Email Sender',
    goal='Send the newsletter via email',
    backstory="You're responsible for sending out the newsletter to subscribers.",
    tools=[email_tool],
    verbose=True,
    llm = llm_model
)

# Define tasks
research_task = Task(
    description="Search for the latest AI developments using Tavily. Focus on recent breakthroughs, new applications, and significant updates in the field of AI.",
    agent=researcher,
    expected_output="A list of recent AI developments and breakthroughs."
)

writing_task = Task(
    description="""Write an engaging newsletter based on the research results. Use the Newsletter Generator tool to create a complete newsletter with:
    1. Title: 'ðŸ“° GenAI Info est lÃ  - Votre GenAI newsletter hebdomadaire ðŸ“°'
    2. An engaging introduction in French
    3. 5 article summaries, each containing:
       - A catchy title in quotes
       - A summary of the article
       - A link to the source
       - Appropriate emojis (ðŸŽ‰ for the title, ðŸ˜Ž at the end of the summary)
       - Separator: ðŸ’¡---------------------ðŸ’¡
    4. A conclusion in French
    Ensure the content is informative, engaging, and follows the specified format.""",
    agent=writer,
    expected_output="A complete, formatted newsletter about recent AI developments."
)

sending_task = Task(
    description="Send the generated newsletter via email to the specified recipient using the Email Sender tool.",
    agent=sender,
    expected_output="Confirmation that the email was sent successfully."
)

# Create crew
newsletter_crew = Crew(
    agents=[researcher, writer, sender],
    tasks=[research_task, writing_task, sending_task],
    verbose=True,
    process=Process.sequential,
    manager_llm=llm_model

)

# Run the crew
result = newsletter_crew.kickoff()

print(result)
